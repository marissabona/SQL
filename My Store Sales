--AN EXAMPLE OF CODE I USE TO ORGANIZE AND ANALYZE THE SALES DATA FOR MY RESALE STORE IN BUFFALO, NY
--My store produces a lot of data. We buy from the public daily, so we have to understand our inventory
--on a deep analytical level. In order to inform my buyers as to what's selling well and what we should
--continue to purchase from our customers, I use SQL to organize and analyze monthly sales data. I then
--present this data to our team, we formulate additional questions about it, and I continue to analyze
-- the data and repeat this process.

--create vendors table and import csv
CREATE TABLE vendors
(id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT,
phone TEXT);

--create stock history table and import csv
CREATE TABLE stock
(date TEXT,
item TEXT,
sku INTEGER,
vendor TEXT,
cost TEXT,
location TEXT,
adjustment TEXT);

--create sales table and import csv
CREATE TABLE apr_sales
(date TEXT,
category TEXT,
item TEXT,
qty TEXT,
sku TEXT,
gross_sale INTEGER,
discount INTEGER,
net_sale INTEGER,
tax INTEGER,
transactioniD TEXT,
device TEXT,
notes TEXT,
location TEXT,
customer_id TEXT,
customer TEXT,
count INTEGER,
itemization TEXT,
employee TEXT);

--create an inventory table for all inventory in our POS system and import csv
CREATE TABLE inventory
(token STRING PRIMARY KEY,
item TEXT,
variation TEXT,
sku INTEGER,
description TEXT,
category TEXT,
GTIN INTEGER,
visibility TEXT,
price INTEGER);


--viewing the total number of items purchased in april by category,
--joined with inventory because stock history does not list category
SELECT i.category, COUNT(DISTINCT s.sku)
FROM stock s
LEFT JOIN inventory i
ON s.sku = i.sku
WHERE s.sku BETWEEN 40100 AND 49999
AND LENGTH(s.sku) > 4
GROUP BY i.category;

--viewing the total number of items purchased in april that also sold in april
SELECT a.category, COUNT(DISTINCT s.sku)
FROM stock s
INNER JOIN apr_sales a
ON s.sku = a.sku
WHERE s.sku BETWEEN 40100 AND 49999
AND LENGTH(s.sku) > 4
GROUP BY a.category;

--viewing items that sold the fastest this month
SELECT a.date as "Date Sold", s.date as "Date Purchased", 
(JULIANDAY(a.date) - JULIANDAY(s.date)) as "sold in days",
a.item, a.gross_sale, a.sku
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
ORDER BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the tees + tops category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "1. Tees + Tops"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the sweaters category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "2. Sweaters"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the jackets category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "3. Jackets"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the pants category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "4. Pants"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the dresses/skirts category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "5. Dresses + Skirts"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing the average prices for items that sold
-- within 7 days or less in the shoes/accessories category
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) as "Time to Sell",
AVG(a.net_sale)
OVER (PARTITION BY (JULIANDAY(a.date) - JULIANDAY(s.date)))
AS "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND a.category = "6. Shoes + Accessories"
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing average price by category of items sold in one week
SELECT a.category, AVG(a.net_sale) as "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY a.category;

--viewing average price total by how many days sold in
--for items sold in one week
SELECT (JULIANDAY(a.date) - JULIANDAY(s.date)) AS "Days Sold In",
AVG(a.net_sale) as "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY (JULIANDAY(a.date) - JULIANDAY(s.date));

--viewing average price of all items sold within a week
SELECT AVG(a.net_sale) as "Average Item Price"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND s.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7;

--viewing the total number of items from various brands purchased during april
SELECT COUNT(sku) as purchased,
CASE
WHEN item LIKE "%zara%" THEN "Zara"
WHEN item LIKE "%forever 21%" THEN "Forever 21"
WHEN item LIKE "%h&m%" THEN "H&M"
WHEN item LIKE "%wild fable%" THEN "Wild Fable"
WHEN item LIKE "%urban%" THEN "Urban Outfitters"
WHEN item LIKE "%american eagle%" THEN "American Eagle"
WHEN item LIKE "%shein%" THEN "Shein"
WHEN item LIKE "%asos%" THEN "ASOS"
WHEN item LIKE "%old navy%" THEN "Old Navy"
WHEN item LIKE "%topshop%" THEN "Topshop"
WHEN item LIKE "%brandy%" THEN "Brandy Melville"
WHEN item LIKE "%loft%" THEN "LOFT"
WHEN item LIKE "%express%" THEN "Express"
WHEN item LIKE "%free people%" THEN "Free People"
WHEN item LIKE "%aerie%" THEN "Aerie"
ELSE "Other"
END AS "brand"
FROM stock
GROUP BY "brand"
ORDER BY "purchased" DESC;

--viewing the total number of items sold within a week of purchase
-- in store, from various brands in april
SELECT COUNT(a.sku) as "sold in a week in store",
CASE
WHEN a.item LIKE "%zara%" THEN "Zara"
WHEN a.item LIKE "%forever 21%" THEN "Forever 21"
WHEN a.item LIKE "%h&m%" THEN "H&M"
WHEN a.item LIKE "%wild fable%" THEN "Wild Fable"
WHEN a.item LIKE "%urban%" THEN "Urban Outfitters"
WHEN a.item LIKE "%american eagle%" THEN "American Eagle"
WHEN a.item LIKE "%shein%" THEN "Shein"
WHEN a.item LIKE "%asos%" THEN "ASOS"
WHEN a.item LIKE "%old navy%" THEN "Old Navy"
WHEN a.item LIKE "%topshop%" THEN "Topshop"
WHEN a.item LIKE "%brandy%" THEN "Brandy Melville"
WHEN a.item LIKE "%loft%" THEN "LOFT"
WHEN a.item LIKE "%express%" THEN "Express"
WHEN a.item LIKE "%free people%" THEN "Free People"
WHEN a.item LIKE "%aerie%" THEN "Aerie"
ELSE "Other"
END AS "brand"
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
GROUP BY "brand"
ORDER BY "sold in a week in store" DESC;

--viewing the total number of items of vintage items
-- purchased from sellers during april
SELECT COUNT(sku)
FROM stock
WHERE item LIKE "%vintage%";

--viewing number of vintage items that sold in store
-- within one week of being purchased from seller
SELECT COUNT(a.sku)
FROM apr_sales a
INNER JOIN stock s
ON a.sku = s.sku
WHERE a.item LIKE "%vintage%"
AND a.sku > 43200
AND s.sku > 43200
AND (JULIANDAY(a.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7;

--creating a new column for items uploaded to website
-- that shows the date the items were uploaded
ALTER TABLE apr_sales
ADD COLUMN date_uploaded TEXT;

--adding the upload dates for the online itmes, using my personal upload calendar,
--and checking my work with a select query after each update
UPDATE apr_sales
SET date_uploaded = "2023-04-04"
WHERE sku BETWEEN 40400 AND 40450;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-04";

UPDATE apr_sales
SET date_uploaded = "2023-04-05"
WHERE sku BETWEEN 40500 AND 40550;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-05";

UPDATE apr_sales
SET date_uploaded = "2023-04-06"
WHERE sku BETWEEN 40600 AND 40650;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-06";

UPDATE apr_sales
SET date_uploaded = "2023-04-07"
WHERE sku BETWEEN 40700 AND 40750;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-07";

UPDATE apr_sales
SET date_uploaded = "2023-04-10"
WHERE sku BETWEEN 41100 AND 41450;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-10";

UPDATE apr_sales
SET date_uploaded = "2023-04-18"
WHERE sku BETWEEN 41800 AND 41850;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-18";

UPDATE apr_sales
SET date_uploaded = "2023-04-19"
WHERE sku BETWEEN 41900 AND 41950;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-19";

UPDATE apr_sales
SET date_uploaded = "2023-04-20"
WHERE sku BETWEEN 42000 AND 42050;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-20";

UPDATE apr_sales
SET date_uploaded = "2023-04-25"
WHERE sku BETWEEN 42500 AND 42550;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-25";

UPDATE apr_sales
SET date_uploaded = "2023-04-26"
WHERE sku BETWEEN 42600 AND 42650;

SELECT * FROM apr_sales
WHERE date_uploaded = "2023-04-26";

--checking my work for all online skus
SELECT date, item, sku, date_uploaded, device
FROM apr_sales
WHERE sku BETWEEN 40100 AND 43050
AND LENGTH(sku) > 4
ORDER BY sku;

--viewing which online items sold within one week of being uploaded, both in store and online
SELECT date as "Date Sold", date_uploaded, item, sku,
JULIANDAY(date) - JULIANDAY(date_uploaded) as "Sold in Days", device
FROM apr_sales
WHERE sku BETWEEN 40100 AND 43050
AND LENGTH(sku) > 4
ORDER BY "Sold in Days";

--my original data has a column titled device, which shows which register a transaction took place at.
--where the device name is listed, the item sold in store.
--where the device name is NULL, the item sold online.

--total number of online items from april
SELECT COUNT(sku)
FROM inventory
WHERE sku BETWEEN 40100 AND 43050
AND LENGTH(sku) > 4;

--total number of online items that sold in april
SELECT COUNT(sku)
FROM apr_sales
WHERE sku BETWEEN 40100 AND 43050
AND LENGTH(sku) > 4;

--viewing number of online items uploaded in april by week
SELECT COUNT(sku),
CASE
WHEN sku BETWEEN 40400 AND 40850 THEN "Week 1"
WHEN sku BETWEEN 41100 AND 41550 THEN "Week 2"
WHEN sku BETWEEN 41800 AND 42250 THEN "Week 3"
WHEN sku BETWEEN 42500 AND 42950 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM inventory
WHERE LENGTH(sku) > 4
GROUP BY "Week Uploaded";

--viewing number of online items sold in april by week
SELECT COUNT(sku),
CASE
WHEN sku BETWEEN 40400 AND 40850 THEN "Week 1"
WHEN sku BETWEEN 41100 AND 41550 THEN "Week 2"
WHEN sku BETWEEN 41800 AND 42250 THEN "Week 3"
WHEN sku BETWEEN 42500 AND 42950 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM apr_sales
WHERE LENGTH(sku) > 4
GROUP BY "Week Uploaded";

--viewing how many online items sold online vs in store
SELECT COUNT(sku), device
FROM apr_sales
WHERE sku BETWEEN 40100 AND 43050
AND LENGTH(sku) > 4
GROUP BY device;

--viewing online items sold online vs in store by week uploaded
SELECT COUNT(sku), device,
CASE
WHEN sku BETWEEN 40400 AND 40850 THEN "Week 1"
WHEN sku BETWEEN 41100 AND 41550 THEN "Week 2"
WHEN sku BETWEEN 41800 AND 42250 THEN "Week 3"
WHEN sku BETWEEN 42500 AND 42950 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM apr_sales
WHERE LENGTH(sku) > 4
GROUP BY "Week Uploaded", device;

--when a new month starts, i update my existing tables, and add a new table for the newly completed month's sales
--then, i begin to analyze the data for my buyers, which we will then compare to the previous months' data.
CREATE TABLE may_sales
(date TEXT,
category TEXT,
item TEXT,
qty TEXT,
sku TEXT,
gross_sale INTEGER,
discount INTEGER,
net_sale INTEGER,
tax INTEGER,
transactioniD TEXT,
device TEXT,
notes TEXT,
location TEXT,
customer_id TEXT,
customer TEXT,
count INTEGER,
itemization TEXT,
employee TEXT);

--add date uploaded for online items, using my personal upload calendar
--i add these to the sales because i replace the inventory table each month
--while the sales tables remain as they are. i can look at the items that sold
--from previous months in future months by comparing the sales tables, not having
--to join them to the inventory table, and by using the sequences of the sku system i've created.
ALTER TABLE may_sales
ADD COLUMN date_uploaded TEXT;

UPDATE may_sales
SET date_uploaded = "2023-05-09"
WHERE sku BETWEEN 50900 AND 50999;

--and i can see the exact number of items that sold from that week's upload
--just based on the number of rows that load in my select statement when
--checking my work.
SELECT * FROM may_sales
WHERE date_uploaded = "2023-05-09";

UPDATE may_sales
SET date_uploaded = "2023-05-16"
WHERE sku BETWEEN 51600 AND 51699;

SELECT * FROM may_sales
WHERE date_uploaded = "2023-05-16";

UPDATE may_sales
SET date_uploaded = "2023-05-23"
WHERE sku BETWEEN 52300 AND 52399;

SELECT * FROM may_sales
WHERE date_uploaded = "2023-05-23";

UPDATE may_sales
SET date_uploaded = "2023-05-24"
WHERE sku BETWEEN 52400 AND 52499;

SELECT * FROM may_sales
WHERE date_uploaded = "2023-05-24";

UPDATE may_sales
SET date_uploaded = "2023-05-30"
WHERE sku BETWEEN 53000 AND 53099;

SELECT * FROM may_sales
WHERE date_uploaded = "2023-05-30";

--total number of items purchased from sellers in may
SELECT COUNT(DISTINCT stock.sku)
FROM stock
WHERE sku BETWEEN 50100 AND 59999;

--total number of items purchased in may by category
SELECT i.category, COUNT(DISTINCT s.sku)
FROM stock s
LEFT JOIN inventory i
ON s.sku = i.sku
WHERE s.sku BETWEEN 50100 AND 59999
AND LENGTH(s.sku) > 4
GROUP BY i.category;

--total number of items purchase in may that sold in may
SELECT m.category, COUNT(DISTINCT s.sku)
FROM stock s
INNER JOIN may_sales m
ON s.sku = m.sku
WHERE s.sku BETWEEN 50100 AND 59999
AND LENGTH(s.sku) > 4
GROUP BY m.category;

--items that sold the fastest in may
SELECT m.date as "Date Sold", s.date as "Date Purchased", 
(JULIANDAY(m.date) - JULIANDAY(s.date)) as "Sold in Days",
m.item, m.gross_sale, m.sku
FROM may_sales m
INNER JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53200
AND s.sku > 53200
AND (JULIANDAY(m.date) - JULIANDAY(s.date)) BETWEEN 0 AND 7
ORDER BY (JULIANDAY(m.date) - JULIANDAY(s.date));

--average price of items sold within various time frames in may
SELECT AVG(m.net_sale) AS "Average Price",
CASE
WHEN (JULIANDAY(m.date) - JULIANDAY(s.date)) = 0 THEN "Same Day"
WHEN (JULIANDAY(m.date) - JULIANDAY(s.date)) = 1 THEN "One Day"
WHEN (JULIANDAY(m.date) - JULIANDAY(s.date)) BETWEEN 2 AND 7 THEN "Within Week"
ELSE "Within Month"
END AS "Time Sold"
FROM may_sales m
INNER JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53199
AND s.sku > 53199
GROUP BY "Time Sold";

--total number of items sold in various price points within different time frames in may
SELECT COUNT(DISTINCT m.sku) AS "Total Items Sold Same Day",
CASE
WHEN m.gross_sale BETWEEN 4 AND 10 THEN "4-10"
WHEN m.gross_sale BETWEEN 12 AND 20 THEN "12-20"
ELSE "Over 20"
END AS "Price Point"
FROM may_sales m
JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53199
AND s.sku > 53199
AND (JULIANDAY(m.date) - JULIANDAY(s.date)) = 0 
GROUP BY "Price Point";

SELECT COUNT(DISTINCT m.sku) AS "Total Items Sold in One Day",
CASE
WHEN m.gross_sale BETWEEN 4 AND 10 THEN "4-10"
WHEN m.gross_sale BETWEEN 12 AND 20 THEN "12-20"
ELSE "Over 20"
END AS "Price Point"
FROM may_sales m
JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53199
AND s.sku > 53199
AND (JULIANDAY(m.date) - JULIANDAY(s.date)) = 1 
GROUP BY "Price Point";

SELECT COUNT(DISTINCT m.sku) AS "Total Items Sold in One Week",
CASE
WHEN m.gross_sale BETWEEN 4 AND 10 THEN "4-10"
WHEN m.gross_sale BETWEEN 12 AND 20 THEN "12-20"
ELSE "Over 20"
END AS "Price Point"
FROM may_sales m
JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53199
AND s.sku > 53199
AND (JULIANDAY(m.date) - JULIANDAY(s.date)) Between 2 AND 7 
GROUP BY "Price Point";

SELECT COUNT(DISTINCT m.sku) AS "Total Items Sold in One Month",
CASE
WHEN m.gross_sale BETWEEN 4 AND 10 THEN "4-10"
WHEN m.gross_sale BETWEEN 12 AND 20 THEN "12-20"
ELSE "Over 20"
END AS "Price Point"
FROM may_sales m
JOIN stock s
ON m.sku = s.sku
WHERE m.sku > 53199
AND s.sku > 53199
AND (JULIANDAY(m.date) - JULIANDAY(s.date)) > 7 
GROUP BY "Price Point";

--total number of items purchased from select brands in may
SELECT COUNT(sku) as purchased,
CASE
WHEN item LIKE "%zara%" THEN "Zara"
WHEN item LIKE "%forever 21%" THEN "Forever 21"
WHEN item LIKE "%h&m%" THEN "H&M"
WHEN item LIKE "%wild fable%" THEN "Wild Fable"
WHEN item LIKE "%urban%" THEN "Urban Outfitters"
WHEN item LIKE "%bdg%" THEN "BDG"
WHEN item LIKE "%under%" THEN "Out From Under"
WHEN item LIKE "%american eagle%" THEN "American Eagle"
WHEN item LIKE "%shein%" THEN "Shein"
WHEN item LIKE "%asos%" THEN "ASOS"
WHEN item LIKE "%old navy%" THEN "Old Navy"
WHEN item LIKE "%topshop%" THEN "Topshop"
WHEN item LIKE "%brandy%" THEN "Brandy Melville"
WHEN item LIKE "%loft%" THEN "LOFT"
WHEN item LIKE "%express%" THEN "Express"
WHEN item LIKE "%free people%" THEN "Free People"
WHEN item LIKE "%aerie%" THEN "Aerie"
WHEN item LIKE "%uniqlo%" THEN "Uniqlo"
WHEN item LIKE "%abercrombie%" THEN "Abercrombie"
WHEN item LIKE "%adidas%" THEN "Adidas"
WHEN item LIKE "%champion%" THEN "Champion"
WHEN item LIKE "%bauer%" THEN "Eddie Bauer"
WHEN item LIKE "%everlane%" THEN "Everlane"
WHEN item LIKE "%gap%" THEN "Gap"
WHEN item LIKE "%harley%" THEN "Harley Davidson"
WHEN item LIKE "%nike%" THEN "Nike"
WHEN item LIKE "%reformation%" THEN "Reformation"
ELSE "Other"
END AS "brand"
FROM stock
WHERE sku BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4
GROUP BY "brand"
ORDER BY "purchased" DESC;

--total number of these items that sold in may
SELECT COUNT(sku) as sold,
CASE
WHEN item LIKE "%zara%" THEN "Zara"
WHEN item LIKE "%forever 21%" THEN "Forever 21"
WHEN item LIKE "%h&m%" THEN "H&M"
WHEN item LIKE "%wild fable%" THEN "Wild Fable"
WHEN item LIKE "%urban%" THEN "Urban Outfitters"
WHEN item LIKE "%bdg%" THEN "BDG"
WHEN item LIKE "%under%" THEN "Out From Under"
WHEN item LIKE "%american eagle%" THEN "American Eagle"
WHEN item LIKE "%shein%" THEN "Shein"
WHEN item LIKE "%asos%" THEN "ASOS"
WHEN item LIKE "%old navy%" THEN "Old Navy"
WHEN item LIKE "%topshop%" THEN "Topshop"
WHEN item LIKE "%brandy%" THEN "Brandy Melville"
WHEN item LIKE "%loft%" THEN "LOFT"
WHEN item LIKE "%express%" THEN "Express"
WHEN item LIKE "%free people%" THEN "Free People"
WHEN item LIKE "%aerie%" THEN "Aerie"
WHEN item LIKE "%uniqlo%" THEN "Uniqlo"
WHEN item LIKE "%abercrombie%" THEN "Abercrombie"
WHEN item LIKE "%adidas%" THEN "Adidas"
WHEN item LIKE "%champion%" THEN "Champion"
WHEN item LIKE "%bauer%" THEN "Eddie Bauer"
WHEN item LIKE "%everlane%" THEN "Everlane"
WHEN item LIKE "%gap%" THEN "Gap"
WHEN item LIKE "%harley%" THEN "Harley Davidson"
WHEN item LIKE "%nike%" THEN "Nike"
WHEN item LIKE "%reformation%" THEN "Reformation"
ELSE "Other"
END AS "brand"
FROM may_sales
WHERE sku BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4
GROUP BY "brand"
ORDER BY "sold" DESC;

--vintage items puchased in may
SELECT COUNT(sku)
FROM stock
WHERE item LIKE "%vintage%"
AND sku BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4;

--vintage items sold in may
SELECT COUNT(sku)
FROM may_sales
WHERE item LIKE "%vintage%"
AND sku BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4;

--total items sold in may vs items purchased in may that sold in may
SELECT COUNT(DISTINCT sku)
FROM may_sales
WHERE sku BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4;

SELECT COUNT (DISTINCT sku)
FROM may_sales
WHERE sku NOT BETWEEN 50100 AND 59999
AND LENGTH(sku) > 4;

--total number of online items uploaded in may by week uploaded
SELECT COUNT(sku),
CASE
WHEN sku BETWEEN 50800 AND 51299 THEN "Week 1"
WHEN sku BETWEEN 51500 AND 51999 THEN "Week 2"
WHEN sku BETWEEN 52200 AND 52699 THEN "Week 3"
WHEN sku BETWEEN 52900 AND 53199 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM inventory
WHERE LENGTH(sku) > 4
GROUP BY "Week Uploaded";

--total number of online items sold in may by week uploaded
SELECT COUNT(sku),
CASE
WHEN sku BETWEEN 50800 AND 51299 THEN "Week 1"
WHEN sku BETWEEN 51500 AND 51999 THEN "Week 2"
WHEN sku BETWEEN 52200 AND 52699 THEN "Week 3"
WHEN sku BETWEEN 52900 AND 53199 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM may_sales
WHERE LENGTH(sku) > 4
GROUP BY "Week Uploaded";

--online items that sold the same day they were uploaded
SELECT date as "Date Sold", date_uploaded, item, sku,
JULIANDAY(date) - JULIANDAY(date_uploaded) as "Sold in Days", device
FROM may_sales
WHERE sku BETWEEN 50100 AND 53199
AND LENGTH(sku) > 4
AND (JULIANDAY(date) - JULIANDAY(date_uploaded)) = 0;

--number of online items sold in various time frames by date uploaded
SELECT date_uploaded, COUNT(DISTINCT sku),
CASE
WHEN (JULIANDAY(date) - JULIANDAY(date_uploaded)) = 0 THEN "Same Day"
WHEN (JULIANDAY(date) - JULIANDAY(date_uploaded)) BETWEEN 1 AND 7 THEN "Same Week"
ELSE "Within Month"
END AS "Time Sold"
FROM may_sales
WHERE sku BETWEEN 50100 AND 53199
AND LENGTH(sku) > 4
GROUP BY "Time Sold";

--total online items that sold online vs in store
SELECT COUNT(sku) as "Items Sold",
CASE
WHEN device = "" THEN "Online"
ELSE "In Store"
END AS "Where Sold"
FROM may_sales
WHERE sku BETWEEN 50100 AND 53199
AND LENGTH(sku) > 4
GROUP BY "Where Sold";

--online items that sold online vs in store by week uploaded
SELECT COUNT(sku) as "Items Sold",
CASE
WHEN device = "" THEN "Online"
ELSE "In Store"
END AS "Where Sold",
CASE
WHEN sku BETWEEN 50800 AND 51299 THEN "Week 1"
WHEN sku BETWEEN 51500 AND 51999 THEN "Week 2"
WHEN sku BETWEEN 52200 AND 52699 THEN "Week 3"
WHEN sku BETWEEN 52900 AND 53199 THEN "Week 4"
ELSE "other"
END as "Week Uploaded"
FROM may_sales
WHERE sku BETWEEN 50100 AND 53199
AND LENGTH(sku) > 4
GROUP BY "Week Uploaded", "Where Sold";
